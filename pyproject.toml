[build-system]
requires = ['poetry-core~=1.0']
build-backend = 'poetry.core.masonry.api'

[tool.poetry]
name = 'sdks'
description = 'Paradigm SDK to interact with DeFi Venues'
license = 'MIT'
version = '0.8.0'
authors = [
    "Paolo D'Onorio De Meo <paolo@paradigm.co>",
    "CÃ¡ssios Marques <cassios@paradigm.co>",
    "Mattia D'Antonio <mattia@paradigm.co>",
]
packages = [
    { include = 'sdk_commons', from = 'sdk_commons' },
    { include = 'sdk_commons/abis', from = 'sdk_commons' },
    { include = 'ribbon', from = 'ribbon' },
    { include = 'thetanuts', from = 'thetanuts' },
]

[tool.poetry.dependencies]
python = '>=3.7.2,<3.12'

# Shared Ribbon & Thetanuts
eth-abi = '4.0.0'
eth-account = '0.8.0'
eth-keys = '0.4.0'
eth-typing = '3.3.0'
eth-utils = '2.1.0'
web3 = '6.4.0'

# Ribbon only
cryptography = '38.0.4'
pyOpenSSL = '22.0.0'
eth-hash = '0.5.1'
eth-keyfile = '0.6.1'
eth-rlp = '0.3.0'

[tool.black]
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''
line-length = 99
skip-string-normalization = true # don't force double quotes

[tool.isort]
profile = "hug"
line_length = 99

[tool.mypy]
# Type-checks the interior of functions without type annotations
check_untyped_defs = true

# Disallows usage of types that come from unfollowed imports
# (anything imported from an unfollowed import is automatically
# given a type of Any)
disallow_any_unimported = true

# Disallows defining functions with incomplete type annotations
# TODO: this should be enabled in a near future
disallow_incomplete_defs = false

# Disallows calling functions without type annotations from
# functions with type annotations.
# TODO: enable after disallow_any_unimported and ignore_missing_imports
disallow_untyped_calls = false

# Reports an error whenever a function with type annotations
# is decorated with a decorator without annotations
disallow_untyped_decorators = true

# Disallows defining functions without type annotations or with
# incomplete type annotations.
disallow_untyped_defs = false

# Suppresses error messages about imports that cannot be resolved
ignore_missing_imports = false

# Shows errors for missing return statements on some execution paths
warn_no_return = true

# Warns about casting an expression to its inferred type
warn_redundant_casts = true

# Shows a warning when returning a value with type Any from a function
# declared with a non- Any return type.
warn_return_any = true

# Shows a warning when encountering any code inferred to be unreachable
# or redundant after performing type analysis.
warn_unreachable = true

# Warns about per-module sections in the config file that do not match
# any files processed when invoking mypy
# (This requires turning off incremental mode using incremental = False)
warn_unused_configs = true

# Warns about unneeded # type: ignore comments
warn_unused_ignores = true
